paths:
  /UserInputs:
    post:
      tags:
        - UserInput
      summary: Create a new instance of the model and persist it into the data source.
      operationId: UserInput.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserInput'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserInput'
      deprecated: false
    put:
      tags:
        - UserInput
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: UserInput.upsert__put_UserInputs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserInput'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserInput'
      deprecated: false
    patch:
      tags:
        - UserInput
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: UserInput.upsert__patch_UserInputs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserInput'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserInput'
      deprecated: false
    get:
      tags:
        - UserInput
      summary: Find all instances of the model matched by filter from the data source.
      operationId: UserInput.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/UserInput'
      deprecated: false
  /UserInputs/replaceOrCreate:
    post:
      tags:
        - UserInput
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: UserInput.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserInput'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserInput'
      deprecated: false
  /UserInputs/upsertWithWhere:
    post:
      tags:
        - UserInput
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: UserInput.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UserInput'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserInput'
      deprecated: false
  '/UserInputs/{id}/exists':
    get:
      tags:
        - UserInput
      summary: Check whether a model instance exists in the data source.
      operationId: 'UserInput.exists__get_UserInputs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/UserInputs/{id}':
    head:
      tags:
        - UserInput
      summary: Check whether a model instance exists in the data source.
      operationId: 'UserInput.exists__head_UserInputs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - UserInput
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: UserInput.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserInput'
      deprecated: false
    delete:
      tags:
        - UserInput
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: UserInput.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - UserInput
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'UserInput.prototype.updateAttributes__put_UserInputs_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UserInput'
        - name: id
          in: path
          description: UserInput id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserInput'
      deprecated: false
    patch:
      tags:
        - UserInput
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'UserInput.prototype.updateAttributes__patch_UserInputs_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UserInput'
        - name: id
          in: path
          description: UserInput id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserInput'
      deprecated: false
  '/UserInputs/{id}/replace':
    post:
      tags:
        - UserInput
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: UserInput.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/UserInput'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserInput'
      deprecated: false
  /UserInputs/findOne:
    get:
      tags:
        - UserInput
      summary: Find first instance of the model matched by filter from the data source.
      operationId: UserInput.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/UserInput'
      deprecated: false
  /UserInputs/update:
    post:
      tags:
        - UserInput
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: UserInput.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/UserInput'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /UserInputs/count:
    get:
      tags:
        - UserInput
      summary: Count instances of the model matched by where from the data source.
      operationId: UserInput.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /UserInputs/input:
    post:
      tags:
        - UserInput
      operationId: UserInput.input
      parameters:
        - name: text
          in: formData
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              response:
                type: string
      deprecated: false
  /Chatbot:
    post:
      tags:
        - Chatbot
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Chatbot.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Chatbot'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chatbot'
      deprecated: false
    put:
      tags:
        - Chatbot
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Chatbot.upsert__put_Chatbot
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Chatbot'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chatbot'
      deprecated: false
    patch:
      tags:
        - Chatbot
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Chatbot.upsert__patch_Chatbot
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Chatbot'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chatbot'
      deprecated: false
    get:
      tags:
        - Chatbot
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Chatbot.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Chatbot'
      deprecated: false
  /Chatbot/replaceOrCreate:
    post:
      tags:
        - Chatbot
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Chatbot.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Chatbot'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chatbot'
      deprecated: false
  /Chatbot/upsertWithWhere:
    post:
      tags:
        - Chatbot
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Chatbot.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Chatbot'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chatbot'
      deprecated: false
  '/Chatbot/{id}/exists':
    get:
      tags:
        - Chatbot
      summary: Check whether a model instance exists in the data source.
      operationId: 'Chatbot.exists__get_Chatbot_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Chatbot/{id}':
    head:
      tags:
        - Chatbot
      summary: Check whether a model instance exists in the data source.
      operationId: 'Chatbot.exists__head_Chatbot_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Chatbot
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Chatbot.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chatbot'
      deprecated: false
    delete:
      tags:
        - Chatbot
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Chatbot.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Chatbot
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Chatbot.prototype.updateAttributes__put_Chatbot_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Chatbot'
        - name: id
          in: path
          description: Chatbot id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chatbot'
      deprecated: false
    patch:
      tags:
        - Chatbot
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Chatbot.prototype.updateAttributes__patch_Chatbot_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Chatbot'
        - name: id
          in: path
          description: Chatbot id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chatbot'
      deprecated: false
  '/Chatbot/{id}/replace':
    post:
      tags:
        - Chatbot
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: Chatbot.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Chatbot'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chatbot'
      deprecated: false
  /Chatbot/findOne:
    get:
      tags:
        - Chatbot
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Chatbot.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Chatbot'
      deprecated: false
  /Chatbot/update:
    post:
      tags:
        - Chatbot
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Chatbot.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Chatbot'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Chatbot/count:
    get:
      tags:
        - Chatbot
      summary: Count instances of the model matched by where from the data source.
      operationId: Chatbot.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Chatbot/chat:
    post:
      tags:
        - Chatbot
      operationId: Chatbot.chat
      parameters:
        - name: userInput
          in: formData
          description: ''
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              response:
                type: string
      deprecated: false
  /Songs:
    post:
      tags:
        - Song
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Song.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Song'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Song'
      deprecated: false
    put:
      tags:
        - Song
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Song.upsert__put_Songs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Song'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Song'
      deprecated: false
    patch:
      tags:
        - Song
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Song.upsert__patch_Songs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Song'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Song'
      deprecated: false
    get:
      tags:
        - Song
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Song.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Song'
      deprecated: false
  /Songs/replaceOrCreate:
    post:
      tags:
        - Song
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Song.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Song'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Song'
      deprecated: false
  /Songs/upsertWithWhere:
    post:
      tags:
        - Song
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Song.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Song'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Song'
      deprecated: false
  '/Songs/{id}/exists':
    get:
      tags:
        - Song
      summary: Check whether a model instance exists in the data source.
      operationId: 'Song.exists__get_Songs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Songs/{id}':
    head:
      tags:
        - Song
      summary: Check whether a model instance exists in the data source.
      operationId: 'Song.exists__head_Songs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Song
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Song.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Song'
      deprecated: false
    delete:
      tags:
        - Song
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Song.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Song
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Song.prototype.updateAttributes__put_Songs_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Song'
        - name: id
          in: path
          description: Song id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Song'
      deprecated: false
    patch:
      tags:
        - Song
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Song.prototype.updateAttributes__patch_Songs_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Song'
        - name: id
          in: path
          description: Song id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Song'
      deprecated: false
  '/Songs/{id}/replace':
    post:
      tags:
        - Song
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: Song.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Song'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Song'
      deprecated: false
  /Songs/findOne:
    get:
      tags:
        - Song
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Song.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Song'
      deprecated: false
  /Songs/update:
    post:
      tags:
        - Song
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Song.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Song'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Songs/count:
    get:
      tags:
        - Song
      summary: Count instances of the model matched by where from the data source.
      operationId: Song.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Songs/recommend:
    post:
      tags:
        - Song
      operationId: Song.recommend
      parameters:
        - name: text
          in: formData
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  /Feeds:
    post:
      tags:
        - Feed
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Feed.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Feed'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
    put:
      tags:
        - Feed
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Feed.upsert__put_Feeds
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Feed'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
    patch:
      tags:
        - Feed
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Feed.upsert__patch_Feeds
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Feed'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
    get:
      tags:
        - Feed
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Feed.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Feed'
      deprecated: false
  /Feeds/replaceOrCreate:
    post:
      tags:
        - Feed
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Feed.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Feed'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
  /Feeds/upsertWithWhere:
    post:
      tags:
        - Feed
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Feed.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Feed'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
  '/Feeds/{id}/exists':
    get:
      tags:
        - Feed
      summary: Check whether a model instance exists in the data source.
      operationId: 'Feed.exists__get_Feeds_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Feeds/{id}':
    head:
      tags:
        - Feed
      summary: Check whether a model instance exists in the data source.
      operationId: 'Feed.exists__head_Feeds_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Feed
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Feed.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
    delete:
      tags:
        - Feed
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Feed.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Feed
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Feed.prototype.updateAttributes__put_Feeds_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Feed'
        - name: id
          in: path
          description: Feed id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
    patch:
      tags:
        - Feed
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: 'Feed.prototype.updateAttributes__patch_Feeds_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Feed'
        - name: id
          in: path
          description: Feed id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
  '/Feeds/{id}/replace':
    post:
      tags:
        - Feed
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: Feed.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Feed'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
  /Feeds/findOne:
    get:
      tags:
        - Feed
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Feed.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Feed'
      deprecated: false
  /Feeds/update:
    post:
      tags:
        - Feed
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Feed.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Feed'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Feeds/count:
    get:
      tags:
        - Feed
      summary: Count instances of the model matched by where from the data source.
      operationId: Feed.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Feeds/getFeeds:
    get:
      tags:
        - Feed
      operationId: Feed.getFeeds
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  /Feeds/deleteFeed:
    post:
      tags:
        - Feed
      operationId: Feed.deleteFeed
      parameters:
        - name: feedId
          in: formData
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              response:
                type: object
      deprecated: false
  /Feeds/createFeed:
    post:
      tags:
        - Feed
      operationId: Feed.createFeed
      parameters:
        - name: songId
          in: formData
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Clients/register:
    post:
      tags:
        - Client
      operationId: Client.register
      parameters:
        - name: username
          in: formData
          required: false
          type: string
        - name: email
          in: formData
          required: false
          type: string
        - name: password
          in: formData
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              response:
                type: string
      deprecated: false
  /Clients/login:
    post:
      tags:
        - Client
      operationId: Client.login
      parameters:
        - name: username
          in: formData
          required: false
          type: string
        - name: password
          in: formData
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              id:
                type: string
              created:
                type: string
              ttl:
                type: number
                format: double
      deprecated: false
  /Clients/logout:
    post:
      tags:
        - Client
      operationId: Client.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
definitions:
  UserInput:
    properties:
      text:
        type: string
      id:
        type: number
        format: double
    additionalProperties: false
  x-any:
    properties: {}
  Chatbot:
    properties:
      id:
        type: number
        format: double
    additionalProperties: false
  Song:
    properties:
      artist:
        type: string
      title:
        type: string
      id:
        type: number
        format: double
    required:
      - artist
      - title
    additionalProperties: false
  Feed:
    properties:
      id:
        type: number
        format: double
    additionalProperties: false
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: backend
  version: 1.0.0
  title: backend
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
